import React from 'react';
import { useEffect, useState } from "react";
import { useLocation } from "react-router-dom";
import { toast, ToastContainer, Flip } from "react-toastify/dist/react-toastify.umd";
import "react-toastify/dist/ReactToastify.css";



const ListMenu = ({ searchResults, updateCartCount }) => {
  const [products, setProducts] = useState([]);

  useEffect(() => {
    if (searchResults.length > 0) {
      setProducts(searchResults);
    } 
    else {
      setProducts([]); // R·ªóng n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£
    }
  }, [searchResults]);

  const fetchProducts = async () => {
    try {
      const response = await fetch(`http://${process.env.URL}/mycoffee/product`);
      const data = await response.json();
      setProducts(data.result || []);
    } catch (error) {
      console.error("Failed to fetch products:", error);
    }
  };

  useEffect(() => {
    fetchProducts();
  }, []);



  const location = useLocation();

  // L·∫•y s·ªë b√†n t·ª´ URL
  const getTableFromUrl = () => {
    const params = new URLSearchParams(location.search);
    return parseInt(params.get("table")) || 0; // Tr·∫£ v·ªÅ s·ªë b√†n ho·∫∑c 0 n·∫øu kh√¥ng c√≥
  };
  
  const table = getTableFromUrl();
  
  const handleAddToOrder = async (productId) => {
    try {
        // L·∫•y th√¥ng tin s·∫£n ph·∫©m theo productId ƒë·ªÉ hi·ªÉn th·ªã t√™n
        const selectedProduct = products.find(product => product.id === productId);
        if (!selectedProduct) throw new Error("Product not found");

        // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ orderId trong localStorage
        let orderId = localStorage.getItem("orderId");

        // N·∫øu ch∆∞a c√≥ orderId, g·ªçi API ƒë·ªÉ t·∫°o m·ªõi
        if (!orderId) {
            const response = await fetch(`http://${process.env.REACT_APP_API_URL}/mycoffee/order`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ table }), // G·ª≠i s·ªë b√†n ƒë·∫øn backend
            });

            if (!response.ok) {
                throw new Error("Failed to create order");
            }

            const data = await response.json();
            orderId = data.result.orderId; // L·∫•y orderId t·ª´ ph·∫£n h·ªìi API

            // L∆∞u orderId v√†o localStorage
            localStorage.setItem("orderId", orderId);
        }

        // L∆∞u s·ªë b√†n v√†o localStorage
        localStorage.setItem("table", table);

        // L∆∞u productId v√† quantity v√†o localStorage
        let currentOrder = JSON.parse(localStorage.getItem("orderDetails")) || [];

        // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong ƒë∆°n h√†ng ch∆∞a
        const existingProduct = currentOrder.find(item => item.productId === productId);

        if (existingProduct) {
            // N·∫øu ƒë√£ c√≥, tƒÉng quantity l√™n 1
            existingProduct.quantity += 1;
        } else {
            // N·∫øu ch∆∞a c√≥, th√™m m·ªõi s·∫£n ph·∫©m v·ªõi quantity = 1
            currentOrder.push({ productId, quantity: 1 });
        }

        // L∆∞u l·∫°i th√¥ng tin ƒë∆°n h√†ng v·ªõi quantity ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        localStorage.setItem("orderDetails", JSON.stringify(currentOrder));
        // G·ªçi h√†m updateCartCount ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m real-time
        updateCartCount();
        // Hi·ªÉn th·ªã th√¥ng b√°o ƒë·∫πp m·∫Øt
        toast.success(`Add "${selectedProduct.name}" to cart successfully üòò`);
        console.log(`Product ${productId} added to order ${orderId} in table ${table}. Quantity: ${existingProduct ? existingProduct.quantity : 1}`);
    } catch (error) {
        toast.error("Failed to add product to order");
        console.error("Error adding product to order:", error);
    }
};

  

return (
  <>
      <ToastContainer transition={Flip} position="top-center" autoClose={3000} />
      <div className="container py-5">
          <div className="row mx-auto">
              <div className="col">
                  <div
                      data-reflow-type="product-list"
                      data-reflow-layout="cards"
                      data-reflow-order="date_desc"
                      data-reflow-product-link="/product.html?product={id}"
                  >
                      <div className="reflow-product-list ref-cards">
                          <div className="ref-products">
                              {products.map((product) => (
                                  <a className="ref-product pb-5" key={product.id}>
                                      <div className="ref-media">
                                          <img
                                              className="ref-image"
                                              src={product.image_url}
                                              loading="lazy"
                                          />
                                      </div>
                                      <div className="ref-product-data">
                                          <div className="ref-product-info">
                                              <h5 className="ref-name">{product.name}</h5>
                                          </div>
                                          <strong className="ref-price">${product.price}</strong>
                                      </div>
                                      <div className="ref-addons">
                                        <a
                                          className="ref-button preview-toggle"
                                          href="#"
                                          onClick={(event) => {
                                            event.preventDefault(); // NgƒÉn vi·ªác ƒëi·ªÅu h∆∞·ªõng m·∫∑c ƒë·ªãnh
                                            handleAddToOrder(product.id);
                                          }}
                                          >
                                          Add to Cart
                                        </a>
                                      </div>
                                  </a>
                              ))}
                          </div>
                          <div className="ref-product-preview">
                              <div className="ref-product-preview-header">
                                  <div className="ref-title"></div>
                                  <div className="ref-close-button">√ó</div>
                              </div>
                              <div className="ref-product-preview-content"></div>
                          </div>
                      </div>
                  </div>
              </div>
          </div>
      </div>


  </>
);

};

export default ListMenu;
