{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.StompJs = {}));\n})(this, function (exports) {\n  'use strict';\n\n  /**\n   * Some byte values, used as per STOMP specifications.\n   *\n   * Part of `@stomp/stompjs`.\n   *\n   * @internal\n   */\n  const BYTE = {\n    // LINEFEED byte (octet 10)\n    LF: '\\x0A',\n    // NULL byte (octet 0)\n    NULL: '\\x00'\n  };\n\n  /**\n   * Frame class represents a STOMP frame.\n   *\n   * @internal\n   */\n  class FrameImpl {\n    /**\n     * Frame constructor. `command`, `headers` and `body` are available as properties.\n     *\n     * @internal\n     */\n    constructor(params) {\n      const {\n        command,\n        headers,\n        body,\n        binaryBody,\n        escapeHeaderValues,\n        skipContentLengthHeader\n      } = params;\n      this.command = command;\n      this.headers = Object.assign({}, headers || {});\n      if (binaryBody) {\n        this._binaryBody = binaryBody;\n        this.isBinaryBody = true;\n      } else {\n        this._body = body || '';\n        this.isBinaryBody = false;\n      }\n      this.escapeHeaderValues = escapeHeaderValues || false;\n      this.skipContentLengthHeader = skipContentLengthHeader || false;\n    }\n    /**\n     * body of the frame\n     */\n    get body() {\n      if (!this._body && this.isBinaryBody) {\n        this._body = new TextDecoder().decode(this._binaryBody);\n      }\n      return this._body || '';\n    }\n    /**\n     * body as Uint8Array\n     */\n    get binaryBody() {\n      if (!this._binaryBody && !this.isBinaryBody) {\n        this._binaryBody = new TextEncoder().encode(this._body);\n      }\n      // At this stage it will definitely have a valid value\n      return this._binaryBody;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n    static fromRawFrame(rawFrame, escapeHeaderValues) {\n      const headers = {};\n      const trim = str => str.replace(/^\\s+|\\s+$/g, '');\n      // In case of repeated headers, as per standards, first value need to be used\n      for (const header of rawFrame.headers.reverse()) {\n        header.indexOf(':');\n        const key = trim(header[0]);\n        let value = trim(header[1]);\n        if (escapeHeaderValues && rawFrame.command !== 'CONNECT' && rawFrame.command !== 'CONNECTED') {\n          value = FrameImpl.hdrValueUnEscape(value);\n        }\n        headers[key] = value;\n      }\n      return new FrameImpl({\n        command: rawFrame.command,\n        headers,\n        binaryBody: rawFrame.binaryBody,\n        escapeHeaderValues\n      });\n    }\n    /**\n     * @internal\n     */\n    toString() {\n      return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n    serialize() {\n      const cmdAndHeaders = this.serializeCmdAndHeaders();\n      if (this.isBinaryBody) {\n        return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n      } else {\n        return cmdAndHeaders + this._body + BYTE.NULL;\n      }\n    }\n    serializeCmdAndHeaders() {\n      const lines = [this.command];\n      if (this.skipContentLengthHeader) {\n        delete this.headers['content-length'];\n      }\n      for (const name of Object.keys(this.headers || {})) {\n        const value = this.headers[name];\n        if (this.escapeHeaderValues && this.command !== 'CONNECT' && this.command !== 'CONNECTED') {\n          lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n        } else {\n          lines.push(`${name}:${value}`);\n        }\n      }\n      if (this.isBinaryBody || !this.isBodyEmpty() && !this.skipContentLengthHeader) {\n        lines.push(`content-length:${this.bodyLength()}`);\n      }\n      return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n    }\n    isBodyEmpty() {\n      return this.bodyLength() === 0;\n    }\n    bodyLength() {\n      const binaryBody = this.binaryBody;\n      return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n    static sizeOfUTF8(s) {\n      return s ? new TextEncoder().encode(s).length : 0;\n    }\n    static toUnit8Array(cmdAndHeaders, binaryBody) {\n      const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n      const nullTerminator = new Uint8Array([0]);\n      const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n      uint8Frame.set(uint8CmdAndHeaders);\n      uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n      uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n      return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n    static marshall(params) {\n      const frame = new FrameImpl(params);\n      return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n    static hdrValueEscape(str) {\n      return str.replace(/\\\\/g, '\\\\\\\\').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n    static hdrValueUnEscape(str) {\n      return str.replace(/\\\\r/g, '\\r').replace(/\\\\n/g, '\\n').replace(/\\\\c/g, ':').replace(/\\\\\\\\/g, '\\\\');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  const NULL = 0;\n  /**\n   * @internal\n   */\n  const LF = 10;\n  /**\n   * @internal\n   */\n  const CR = 13;\n  /**\n   * @internal\n   */\n  const COLON = 58;\n  /**\n   * This is an evented, rec descent parser.\n   * A stream of Octets can be passed and whenever it recognizes\n   * a complete Frame or an incoming ping it will invoke the registered callbacks.\n   *\n   * All incoming Octets are fed into _onByte function.\n   * Depending on current state the _onByte function keeps changing.\n   * Depending on the state it keeps accumulating into _token and _results.\n   * State is indicated by current value of _onByte, all states are named as _collect.\n   *\n   * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n   * imply that all lengths are considered in bytes (instead of string lengths).\n   * So, before actual parsing, if the incoming data is String it is converted to Octets.\n   * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n   *\n   * There is no peek function on the incoming data.\n   * When a state change occurs based on an Octet without consuming the Octet,\n   * the Octet, after state change, is fed again (_reinjectByte).\n   * This became possible as the state change can be determined by inspecting just one Octet.\n   *\n   * There are two modes to collect the body, if content-length header is there then it by counting Octets\n   * otherwise it is determined by NULL terminator.\n   *\n   * Following the standards, the command and headers are converted to Strings\n   * and the body is returned as Octets.\n   * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n   *\n   * This parser does not use Regular Expressions as that can only operate on Strings.\n   *\n   * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n   * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n   * is pushed.\n   *\n   * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n   * (which is protocol version specific), and convert body to text.\n   *\n   * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n   *\n   * Part of `@stomp/stompjs`.\n   *\n   * @internal\n   */\n  class Parser {\n    constructor(onFrame, onIncomingPing) {\n      this.onFrame = onFrame;\n      this.onIncomingPing = onIncomingPing;\n      this._encoder = new TextEncoder();\n      this._decoder = new TextDecoder();\n      this._token = [];\n      this._initState();\n    }\n    parseChunk(segment, appendMissingNULLonIncoming = false) {\n      let chunk;\n      if (typeof segment === 'string') {\n        chunk = this._encoder.encode(segment);\n      } else {\n        chunk = new Uint8Array(segment);\n      }\n      // See https://github.com/stomp-js/stompjs/issues/89\n      // Remove when underlying issue is fixed.\n      //\n      // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n      if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n        const chunkWithNull = new Uint8Array(chunk.length + 1);\n        chunkWithNull.set(chunk, 0);\n        chunkWithNull[chunk.length] = 0;\n        chunk = chunkWithNull;\n      }\n      // tslint:disable-next-line:prefer-for-of\n      for (let i = 0; i < chunk.length; i++) {\n        const byte = chunk[i];\n        this._onByte(byte);\n      }\n    }\n    // The following implements a simple Rec Descent Parser.\n    // The grammar is simple and just one byte tells what should be the next state\n    _collectFrame(byte) {\n      if (byte === NULL) {\n        // Ignore\n        return;\n      }\n      if (byte === CR) {\n        // Ignore CR\n        return;\n      }\n      if (byte === LF) {\n        // Incoming Ping\n        this.onIncomingPing();\n        return;\n      }\n      this._onByte = this._collectCommand;\n      this._reinjectByte(byte);\n    }\n    _collectCommand(byte) {\n      if (byte === CR) {\n        // Ignore CR\n        return;\n      }\n      if (byte === LF) {\n        this._results.command = this._consumeTokenAsUTF8();\n        this._onByte = this._collectHeaders;\n        return;\n      }\n      this._consumeByte(byte);\n    }\n    _collectHeaders(byte) {\n      if (byte === CR) {\n        // Ignore CR\n        return;\n      }\n      if (byte === LF) {\n        this._setupCollectBody();\n        return;\n      }\n      this._onByte = this._collectHeaderKey;\n      this._reinjectByte(byte);\n    }\n    _reinjectByte(byte) {\n      this._onByte(byte);\n    }\n    _collectHeaderKey(byte) {\n      if (byte === COLON) {\n        this._headerKey = this._consumeTokenAsUTF8();\n        this._onByte = this._collectHeaderValue;\n        return;\n      }\n      this._consumeByte(byte);\n    }\n    _collectHeaderValue(byte) {\n      if (byte === CR) {\n        // Ignore CR\n        return;\n      }\n      if (byte === LF) {\n        this._results.headers.push([this._headerKey, this._consumeTokenAsUTF8()]);\n        this._headerKey = undefined;\n        this._onByte = this._collectHeaders;\n        return;\n      }\n      this._consumeByte(byte);\n    }\n    _setupCollectBody() {\n      const contentLengthHeader = this._results.headers.filter(header => {\n        return header[0] === 'content-length';\n      })[0];\n      if (contentLengthHeader) {\n        this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n        this._onByte = this._collectBodyFixedSize;\n      } else {\n        this._onByte = this._collectBodyNullTerminated;\n      }\n    }\n    _collectBodyNullTerminated(byte) {\n      if (byte === NULL) {\n        this._retrievedBody();\n        return;\n      }\n      this._consumeByte(byte);\n    }\n    _collectBodyFixedSize(byte) {\n      // It is post decrement, so that we discard the trailing NULL octet\n      if (this._bodyBytesRemaining-- === 0) {\n        this._retrievedBody();\n        return;\n      }\n      this._consumeByte(byte);\n    }\n    _retrievedBody() {\n      this._results.binaryBody = this._consumeTokenAsRaw();\n      try {\n        this.onFrame(this._results);\n      } catch (e) {\n        console.log(`Ignoring an exception thrown by a frame handler. Original exception: `, e);\n      }\n      this._initState();\n    }\n    // Rec Descent Parser helpers\n    _consumeByte(byte) {\n      this._token.push(byte);\n    }\n    _consumeTokenAsUTF8() {\n      return this._decoder.decode(this._consumeTokenAsRaw());\n    }\n    _consumeTokenAsRaw() {\n      const rawResult = new Uint8Array(this._token);\n      this._token = [];\n      return rawResult;\n    }\n    _initState() {\n      this._results = {\n        command: undefined,\n        headers: [],\n        binaryBody: undefined\n      };\n      this._token = [];\n      this._headerKey = undefined;\n      this._onByte = this._collectFrame;\n    }\n  }\n\n  /**\n   * Possible states for the IStompSocket\n   */\n  exports.StompSocketState = void 0;\n  (function (StompSocketState) {\n    StompSocketState[StompSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    StompSocketState[StompSocketState[\"OPEN\"] = 1] = \"OPEN\";\n    StompSocketState[StompSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n    StompSocketState[StompSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n  })(exports.StompSocketState = exports.StompSocketState || (exports.StompSocketState = {}));\n  /**\n   * Possible activation state\n   */\n  exports.ActivationState = void 0;\n  (function (ActivationState) {\n    ActivationState[ActivationState[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    ActivationState[ActivationState[\"DEACTIVATING\"] = 1] = \"DEACTIVATING\";\n    ActivationState[ActivationState[\"INACTIVE\"] = 2] = \"INACTIVE\";\n  })(exports.ActivationState = exports.ActivationState || (exports.ActivationState = {}));\n\n  /**\n   * Supported STOMP versions\n   *\n   * Part of `@stomp/stompjs`.\n   */\n  class Versions {\n    /**\n     * Takes an array of versions, typical elements '1.2', '1.1', or '1.0'\n     *\n     * You will be creating an instance of this class if you want to override\n     * supported versions to be declared during STOMP handshake.\n     */\n    constructor(versions) {\n      this.versions = versions;\n    }\n    /**\n     * Used as part of CONNECT STOMP Frame\n     */\n    supportedVersions() {\n      return this.versions.join(',');\n    }\n    /**\n     * Used while creating a WebSocket\n     */\n    protocolVersions() {\n      return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n    }\n  }\n  /**\n   * Indicates protocol version 1.0\n   */\n  Versions.V1_0 = '1.0';\n  /**\n   * Indicates protocol version 1.1\n   */\n  Versions.V1_1 = '1.1';\n  /**\n   * Indicates protocol version 1.2\n   */\n  Versions.V1_2 = '1.2';\n  /**\n   * @internal\n   */\n  Versions.default = new Versions([Versions.V1_2, Versions.V1_1, Versions.V1_0]);\n\n  /**\n   * @internal\n   */\n  function augmentWebsocket(webSocket, debug) {\n    webSocket.terminate = function () {\n      const noOp = () => {};\n      // set all callbacks to no op\n      this.onerror = noOp;\n      this.onmessage = noOp;\n      this.onopen = noOp;\n      const ts = new Date();\n      const id = Math.random().toString().substring(2, 8); // A simulated id\n      const origOnClose = this.onclose;\n      // Track delay in actual closure of the socket\n      this.onclose = closeEvent => {\n        const delay = new Date().getTime() - ts.getTime();\n        debug(`Discarded socket (#${id})  closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`);\n      };\n      this.close();\n      origOnClose?.call(webSocket, {\n        code: 4001,\n        reason: `Quick discarding socket (#${id}) without waiting for the shutdown sequence.`,\n        wasClean: false\n      });\n    };\n  }\n\n  /**\n   * The STOMP protocol handler\n   *\n   * Part of `@stomp/stompjs`.\n   *\n   * @internal\n   */\n  class StompHandler {\n    constructor(_client, _webSocket, config) {\n      this._client = _client;\n      this._webSocket = _webSocket;\n      this._connected = false;\n      this._serverFrameHandlers = {\n        // [CONNECTED Frame](https://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n        CONNECTED: frame => {\n          this.debug(`connected to server ${frame.headers.server}`);\n          this._connected = true;\n          this._connectedVersion = frame.headers.version;\n          // STOMP version 1.2 needs header values to be escaped\n          if (this._connectedVersion === Versions.V1_2) {\n            this._escapeHeaderValues = true;\n          }\n          this._setupHeartbeat(frame.headers);\n          this.onConnect(frame);\n        },\n        // [MESSAGE Frame](https://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n        MESSAGE: frame => {\n          // the callback is registered when the client calls\n          // `subscribe()`.\n          // If there is no registered subscription for the received message,\n          // the default `onUnhandledMessage` callback is used that the client can set.\n          // This is useful for subscriptions that are automatically created\n          // on the browser side (e.g. [RabbitMQ's temporary\n          // queues](https://www.rabbitmq.com/stomp.html)).\n          const subscription = frame.headers.subscription;\n          const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n          // bless the frame to be a Message\n          const message = frame;\n          const client = this;\n          const messageId = this._connectedVersion === Versions.V1_2 ? message.headers.ack : message.headers['message-id'];\n          // add `ack()` and `nack()` methods directly to the returned frame\n          // so that a simple call to `message.ack()` can acknowledge the message.\n          message.ack = (headers = {}) => {\n            return client.ack(messageId, subscription, headers);\n          };\n          message.nack = (headers = {}) => {\n            return client.nack(messageId, subscription, headers);\n          };\n          onReceive(message);\n        },\n        // [RECEIPT Frame](https://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n        RECEIPT: frame => {\n          const callback = this._receiptWatchers[frame.headers['receipt-id']];\n          if (callback) {\n            callback(frame);\n            // Server will acknowledge only once, remove the callback\n            delete this._receiptWatchers[frame.headers['receipt-id']];\n          } else {\n            this.onUnhandledReceipt(frame);\n          }\n        },\n        // [ERROR Frame](https://stomp.github.com/stomp-specification-1.2.html#ERROR)\n        ERROR: frame => {\n          this.onStompError(frame);\n        }\n      };\n      // used to index subscribers\n      this._counter = 0;\n      // subscription callbacks indexed by subscriber's ID\n      this._subscriptions = {};\n      // receipt-watchers indexed by receipts-ids\n      this._receiptWatchers = {};\n      this._partialData = '';\n      this._escapeHeaderValues = false;\n      this._lastServerActivityTS = Date.now();\n      this.debug = config.debug;\n      this.stompVersions = config.stompVersions;\n      this.connectHeaders = config.connectHeaders;\n      this.disconnectHeaders = config.disconnectHeaders;\n      this.heartbeatIncoming = config.heartbeatIncoming;\n      this.heartbeatOutgoing = config.heartbeatOutgoing;\n      this.splitLargeFrames = config.splitLargeFrames;\n      this.maxWebSocketChunkSize = config.maxWebSocketChunkSize;\n      this.forceBinaryWSFrames = config.forceBinaryWSFrames;\n      this.logRawCommunication = config.logRawCommunication;\n      this.appendMissingNULLonIncoming = config.appendMissingNULLonIncoming;\n      this.discardWebsocketOnCommFailure = config.discardWebsocketOnCommFailure;\n      this.onConnect = config.onConnect;\n      this.onDisconnect = config.onDisconnect;\n      this.onStompError = config.onStompError;\n      this.onWebSocketClose = config.onWebSocketClose;\n      this.onWebSocketError = config.onWebSocketError;\n      this.onUnhandledMessage = config.onUnhandledMessage;\n      this.onUnhandledReceipt = config.onUnhandledReceipt;\n      this.onUnhandledFrame = config.onUnhandledFrame;\n    }\n    get connectedVersion() {\n      return this._connectedVersion;\n    }\n    get connected() {\n      return this._connected;\n    }\n    start() {\n      const parser = new Parser(\n      // On Frame\n      rawFrame => {\n        const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n        // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n        if (!this.logRawCommunication) {\n          this.debug(`<<< ${frame}`);\n        }\n        const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n        serverFrameHandler(frame);\n      },\n      // On Incoming Ping\n      () => {\n        this.debug('<<< PONG');\n      });\n      this._webSocket.onmessage = evt => {\n        this.debug('Received data');\n        this._lastServerActivityTS = Date.now();\n        if (this.logRawCommunication) {\n          const rawChunkAsString = evt.data instanceof ArrayBuffer ? new TextDecoder().decode(evt.data) : evt.data;\n          this.debug(`<<< ${rawChunkAsString}`);\n        }\n        parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n      };\n      this._webSocket.onclose = closeEvent => {\n        this.debug(`Connection closed to ${this._webSocket.url}`);\n        this._cleanUp();\n        this.onWebSocketClose(closeEvent);\n      };\n      this._webSocket.onerror = errorEvent => {\n        this.onWebSocketError(errorEvent);\n      };\n      this._webSocket.onopen = () => {\n        // Clone before updating\n        const connectHeaders = Object.assign({}, this.connectHeaders);\n        this.debug('Web Socket Opened...');\n        connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n        connectHeaders['heart-beat'] = [this.heartbeatOutgoing, this.heartbeatIncoming].join(',');\n        this._transmit({\n          command: 'CONNECT',\n          headers: connectHeaders\n        });\n      };\n    }\n    _setupHeartbeat(headers) {\n      if (headers.version !== Versions.V1_1 && headers.version !== Versions.V1_2) {\n        return;\n      }\n      // It is valid for the server to not send this header\n      // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n      if (!headers['heart-beat']) {\n        return;\n      }\n      // heart-beat header received from the server looks like:\n      //\n      //     heart-beat: sx, sy\n      const [serverOutgoing, serverIncoming] = headers['heart-beat'].split(',').map(v => parseInt(v, 10));\n      if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n        const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n        this.debug(`send PING every ${ttl}ms`);\n        this._pinger = setInterval(() => {\n          if (this._webSocket.readyState === exports.StompSocketState.OPEN) {\n            this._webSocket.send(BYTE.LF);\n            this.debug('>>> PING');\n          }\n        }, ttl);\n      }\n      if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n        const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n        this.debug(`check PONG every ${ttl}ms`);\n        this._ponger = setInterval(() => {\n          const delta = Date.now() - this._lastServerActivityTS;\n          // We wait twice the TTL to be flexible on window's setInterval calls\n          if (delta > ttl * 2) {\n            this.debug(`did not receive server activity for the last ${delta}ms`);\n            this._closeOrDiscardWebsocket();\n          }\n        }, ttl);\n      }\n    }\n    _closeOrDiscardWebsocket() {\n      if (this.discardWebsocketOnCommFailure) {\n        this.debug('Discarding websocket, the underlying socket may linger for a while');\n        this.discardWebsocket();\n      } else {\n        this.debug('Issuing close on the websocket');\n        this._closeWebsocket();\n      }\n    }\n    forceDisconnect() {\n      if (this._webSocket) {\n        if (this._webSocket.readyState === exports.StompSocketState.CONNECTING || this._webSocket.readyState === exports.StompSocketState.OPEN) {\n          this._closeOrDiscardWebsocket();\n        }\n      }\n    }\n    _closeWebsocket() {\n      this._webSocket.onmessage = () => {}; // ignore messages\n      this._webSocket.close();\n    }\n    discardWebsocket() {\n      if (typeof this._webSocket.terminate !== 'function') {\n        augmentWebsocket(this._webSocket, msg => this.debug(msg));\n      }\n      // @ts-ignore - this method will be there at this stage\n      this._webSocket.terminate();\n    }\n    _transmit(params) {\n      const {\n        command,\n        headers,\n        body,\n        binaryBody,\n        skipContentLengthHeader\n      } = params;\n      const frame = new FrameImpl({\n        command,\n        headers,\n        body,\n        binaryBody,\n        escapeHeaderValues: this._escapeHeaderValues,\n        skipContentLengthHeader\n      });\n      let rawChunk = frame.serialize();\n      if (this.logRawCommunication) {\n        this.debug(`>>> ${rawChunk}`);\n      } else {\n        this.debug(`>>> ${frame}`);\n      }\n      if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n        rawChunk = new TextEncoder().encode(rawChunk);\n      }\n      if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n        this._webSocket.send(rawChunk);\n      } else {\n        let out = rawChunk;\n        while (out.length > 0) {\n          const chunk = out.substring(0, this.maxWebSocketChunkSize);\n          out = out.substring(this.maxWebSocketChunkSize);\n          this._webSocket.send(chunk);\n          this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n        }\n      }\n    }\n    dispose() {\n      if (this.connected) {\n        try {\n          // clone before updating\n          const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n          if (!disconnectHeaders.receipt) {\n            disconnectHeaders.receipt = `close-${this._counter++}`;\n          }\n          this.watchForReceipt(disconnectHeaders.receipt, frame => {\n            this._closeWebsocket();\n            this._cleanUp();\n            this.onDisconnect(frame);\n          });\n          this._transmit({\n            command: 'DISCONNECT',\n            headers: disconnectHeaders\n          });\n        } catch (error) {\n          this.debug(`Ignoring error during disconnect ${error}`);\n        }\n      } else {\n        if (this._webSocket.readyState === exports.StompSocketState.CONNECTING || this._webSocket.readyState === exports.StompSocketState.OPEN) {\n          this._closeWebsocket();\n        }\n      }\n    }\n    _cleanUp() {\n      this._connected = false;\n      if (this._pinger) {\n        clearInterval(this._pinger);\n        this._pinger = undefined;\n      }\n      if (this._ponger) {\n        clearInterval(this._ponger);\n        this._ponger = undefined;\n      }\n    }\n    publish(params) {\n      const {\n        destination,\n        headers,\n        body,\n        binaryBody,\n        skipContentLengthHeader\n      } = params;\n      const hdrs = Object.assign({\n        destination\n      }, headers);\n      this._transmit({\n        command: 'SEND',\n        headers: hdrs,\n        body,\n        binaryBody,\n        skipContentLengthHeader\n      });\n    }\n    watchForReceipt(receiptId, callback) {\n      this._receiptWatchers[receiptId] = callback;\n    }\n    subscribe(destination, callback, headers = {}) {\n      headers = Object.assign({}, headers);\n      if (!headers.id) {\n        headers.id = `sub-${this._counter++}`;\n      }\n      headers.destination = destination;\n      this._subscriptions[headers.id] = callback;\n      this._transmit({\n        command: 'SUBSCRIBE',\n        headers\n      });\n      const client = this;\n      return {\n        id: headers.id,\n        unsubscribe(hdrs) {\n          return client.unsubscribe(headers.id, hdrs);\n        }\n      };\n    }\n    unsubscribe(id, headers = {}) {\n      headers = Object.assign({}, headers);\n      delete this._subscriptions[id];\n      headers.id = id;\n      this._transmit({\n        command: 'UNSUBSCRIBE',\n        headers\n      });\n    }\n    begin(transactionId) {\n      const txId = transactionId || `tx-${this._counter++}`;\n      this._transmit({\n        command: 'BEGIN',\n        headers: {\n          transaction: txId\n        }\n      });\n      const client = this;\n      return {\n        id: txId,\n        commit() {\n          client.commit(txId);\n        },\n        abort() {\n          client.abort(txId);\n        }\n      };\n    }\n    commit(transactionId) {\n      this._transmit({\n        command: 'COMMIT',\n        headers: {\n          transaction: transactionId\n        }\n      });\n    }\n    abort(transactionId) {\n      this._transmit({\n        command: 'ABORT',\n        headers: {\n          transaction: transactionId\n        }\n      });\n    }\n    ack(messageId, subscriptionId, headers = {}) {\n      headers = Object.assign({}, headers);\n      if (this._connectedVersion === Versions.V1_2) {\n        headers.id = messageId;\n      } else {\n        headers['message-id'] = messageId;\n      }\n      headers.subscription = subscriptionId;\n      this._transmit({\n        command: 'ACK',\n        headers\n      });\n    }\n    nack(messageId, subscriptionId, headers = {}) {\n      headers = Object.assign({}, headers);\n      if (this._connectedVersion === Versions.V1_2) {\n        headers.id = messageId;\n      } else {\n        headers['message-id'] = messageId;\n      }\n      headers.subscription = subscriptionId;\n      return this._transmit({\n        command: 'NACK',\n        headers\n      });\n    }\n  }\n\n  /**\n   * STOMP Client Class.\n   *\n   * Part of `@stomp/stompjs`.\n   */\n  class Client {\n    /**\n     * Create an instance.\n     */\n    constructor(conf = {}) {\n      /**\n       * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\n       *\n       * Example:\n       * ```javascript\n       *        // Try only versions 1.1 and 1.0\n       *        client.stompVersions = new Versions(['1.1', '1.0'])\n       * ```\n       */\n      this.stompVersions = Versions.default;\n      /**\n       * Will retry if Stomp connection is not established in specified milliseconds.\n       * Default 0, which switches off automatic reconnection.\n       */\n      this.connectionTimeout = 0;\n      /**\n       *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n       */\n      this.reconnectDelay = 5000;\n      /**\n       * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n       */\n      this.heartbeatIncoming = 10000;\n      /**\n       * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n       */\n      this.heartbeatOutgoing = 10000;\n      /**\n       * This switches on a non-standard behavior while sending WebSocket packets.\n       * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n       * Only Java Spring brokers seem to support this mode.\n       *\n       * WebSockets, by itself, split large (text) packets,\n       * so it is not needed with a truly compliant STOMP/WebSocket broker.\n       * Setting it for such a broker will cause large messages to fail.\n       *\n       * `false` by default.\n       *\n       * Binary frames are never split.\n       */\n      this.splitLargeFrames = false;\n      /**\n       * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n       * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n       */\n      this.maxWebSocketChunkSize = 8 * 1024;\n      /**\n       * Usually the\n       * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n       * is automatically decided by type of the payload.\n       * Default is `false`, which should work with all compliant brokers.\n       *\n       * Set this flag to force binary frames.\n       */\n      this.forceBinaryWSFrames = false;\n      /**\n       * A bug in ReactNative chops a string on occurrence of a NULL.\n       * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n       * This makes incoming WebSocket messages invalid STOMP packets.\n       * Setting this flag attempts to reverse the damage by appending a NULL.\n       * If the broker splits a large message into multiple WebSocket messages,\n       * this flag will cause data loss and abnormal termination of connection.\n       *\n       * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n       */\n      this.appendMissingNULLonIncoming = false;\n      /**\n       * Browsers do not immediately close WebSockets when `.close` is issued.\n       * This may cause reconnection to take a significantly long time in case\n       *  of some types of failures.\n       * In case of incoming heartbeat failure, this experimental flag instructs\n       * the library to discard the socket immediately\n       * (even before it is actually closed).\n       */\n      this.discardWebsocketOnCommFailure = false;\n      /**\n       * Activation state.\n       *\n       * It will usually be ACTIVE or INACTIVE.\n       * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n       */\n      this.state = exports.ActivationState.INACTIVE;\n      // No op callbacks\n      const noOp = () => {};\n      this.debug = noOp;\n      this.beforeConnect = noOp;\n      this.onConnect = noOp;\n      this.onDisconnect = noOp;\n      this.onUnhandledMessage = noOp;\n      this.onUnhandledReceipt = noOp;\n      this.onUnhandledFrame = noOp;\n      this.onStompError = noOp;\n      this.onWebSocketClose = noOp;\n      this.onWebSocketError = noOp;\n      this.logRawCommunication = false;\n      this.onChangeState = noOp;\n      // These parameters would typically get proper values before connect is called\n      this.connectHeaders = {};\n      this._disconnectHeaders = {};\n      // Apply configuration\n      this.configure(conf);\n    }\n    /**\n     * Underlying WebSocket instance, READONLY.\n     */\n    get webSocket() {\n      return this._stompHandler?._webSocket;\n    }\n    /**\n     * Disconnection headers.\n     */\n    get disconnectHeaders() {\n      return this._disconnectHeaders;\n    }\n    set disconnectHeaders(value) {\n      this._disconnectHeaders = value;\n      if (this._stompHandler) {\n        this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n      }\n    }\n    /**\n     * `true` if there is an active connection to STOMP Broker\n     */\n    get connected() {\n      return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * version of STOMP protocol negotiated with the server, READONLY\n     */\n    get connectedVersion() {\n      return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * if the client is active (connected or going to reconnect)\n     */\n    get active() {\n      return this.state === exports.ActivationState.ACTIVE;\n    }\n    _changeState(state) {\n      this.state = state;\n      this.onChangeState(state);\n    }\n    /**\n     * Update configuration.\n     */\n    configure(conf) {\n      // bulk assign all properties to this\n      Object.assign(this, conf);\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n     * it will keep trying to reconnect.\n     *\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n     */\n    activate() {\n      const _activate = () => {\n        if (this.active) {\n          this.debug('Already ACTIVE, ignoring request to activate');\n          return;\n        }\n        this._changeState(exports.ActivationState.ACTIVE);\n        this._connect();\n      };\n      // if it is deactivating, wait for it to complete before activating.\n      if (this.state === exports.ActivationState.DEACTIVATING) {\n        this.debug('Waiting for deactivation to finish before activating');\n        this.deactivate().then(() => {\n          _activate();\n        });\n      } else {\n        _activate();\n      }\n    }\n    async _connect() {\n      await this.beforeConnect();\n      if (this._stompHandler) {\n        this.debug('There is already a stompHandler, skipping the call to connect');\n        return;\n      }\n      if (!this.active) {\n        this.debug('Client has been marked inactive, will not attempt to connect');\n        return;\n      }\n      // setup connection watcher\n      if (this.connectionTimeout > 0) {\n        // clear first\n        if (this._connectionWatcher) {\n          clearTimeout(this._connectionWatcher);\n        }\n        this._connectionWatcher = setTimeout(() => {\n          if (this.connected) {\n            return;\n          }\n          // Connection not established, close the underlying socket\n          // a reconnection will be attempted\n          this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n          this.forceDisconnect();\n        }, this.connectionTimeout);\n      }\n      this.debug('Opening Web Socket...');\n      // Get the actual WebSocket (or a similar object)\n      const webSocket = this._createWebSocket();\n      this._stompHandler = new StompHandler(this, webSocket, {\n        debug: this.debug,\n        stompVersions: this.stompVersions,\n        connectHeaders: this.connectHeaders,\n        disconnectHeaders: this._disconnectHeaders,\n        heartbeatIncoming: this.heartbeatIncoming,\n        heartbeatOutgoing: this.heartbeatOutgoing,\n        splitLargeFrames: this.splitLargeFrames,\n        maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n        forceBinaryWSFrames: this.forceBinaryWSFrames,\n        logRawCommunication: this.logRawCommunication,\n        appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n        discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n        onConnect: frame => {\n          // Successfully connected, stop the connection watcher\n          if (this._connectionWatcher) {\n            clearTimeout(this._connectionWatcher);\n            this._connectionWatcher = undefined;\n          }\n          if (!this.active) {\n            this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n            this._disposeStompHandler();\n            return;\n          }\n          this.onConnect(frame);\n        },\n        onDisconnect: frame => {\n          this.onDisconnect(frame);\n        },\n        onStompError: frame => {\n          this.onStompError(frame);\n        },\n        onWebSocketClose: evt => {\n          this._stompHandler = undefined; // a new one will be created in case of a reconnect\n          if (this.state === exports.ActivationState.DEACTIVATING) {\n            // Mark deactivation complete\n            this._changeState(exports.ActivationState.INACTIVE);\n          }\n          // The callback is called before attempting to reconnect, this would allow the client\n          // to be `deactivated` in the callback.\n          this.onWebSocketClose(evt);\n          if (this.active) {\n            this._schedule_reconnect();\n          }\n        },\n        onWebSocketError: evt => {\n          this.onWebSocketError(evt);\n        },\n        onUnhandledMessage: message => {\n          this.onUnhandledMessage(message);\n        },\n        onUnhandledReceipt: frame => {\n          this.onUnhandledReceipt(frame);\n        },\n        onUnhandledFrame: frame => {\n          this.onUnhandledFrame(frame);\n        }\n      });\n      this._stompHandler.start();\n    }\n    _createWebSocket() {\n      let webSocket;\n      if (this.webSocketFactory) {\n        webSocket = this.webSocketFactory();\n      } else if (this.brokerURL) {\n        webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n      } else {\n        throw new Error('Either brokerURL or webSocketFactory must be provided');\n      }\n      webSocket.binaryType = 'arraybuffer';\n      return webSocket;\n    }\n    _schedule_reconnect() {\n      if (this.reconnectDelay > 0) {\n        this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n        this._reconnector = setTimeout(() => {\n          this._connect();\n        }, this.reconnectDelay);\n      }\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\n     *\n     * This call is async. It will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after the underlying websocket is properly disposed of.\n     *\n     * It is not an error to invoke this method more than once.\n     * Each of those would resolve on completion of deactivation.\n     *\n     * To reactivate, you can call [Client#activate]{@link Client#activate}.\n     *\n     * Experimental: pass `force: true` to immediately discard the underlying connection.\n     * This mode will skip both the STOMP and the Websocket shutdown sequences.\n     * In some cases, browsers take a long time in the Websocket shutdown\n     * if the underlying connection had gone stale.\n     * Using this mode can speed up.\n     * When this mode is used, the actual Websocket may linger for a while\n     * and the broker may not realize that the connection is no longer in use.\n     *\n     * It is possible to invoke this method initially without the `force` option\n     * and subsequently, say after a wait, with the `force` option.\n     */\n    async deactivate(options = {}) {\n      const force = options.force || false;\n      const needToDispose = this.active;\n      let retPromise;\n      if (this.state === exports.ActivationState.INACTIVE) {\n        this.debug(`Already INACTIVE, nothing more to do`);\n        return Promise.resolve();\n      }\n      this._changeState(exports.ActivationState.DEACTIVATING);\n      // Clear if a reconnection was scheduled\n      if (this._reconnector) {\n        clearTimeout(this._reconnector);\n        this._reconnector = undefined;\n      }\n      if (this._stompHandler &&\n      // @ts-ignore - if there is a _stompHandler, there is the webSocket\n      this.webSocket.readyState !== exports.StompSocketState.CLOSED) {\n        const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\n        // we need to wait for the underlying websocket to close\n        retPromise = new Promise((resolve, reject) => {\n          // @ts-ignore - there is a _stompHandler\n          this._stompHandler.onWebSocketClose = evt => {\n            origOnWebSocketClose(evt);\n            resolve();\n          };\n        });\n      } else {\n        // indicate that auto reconnect loop should terminate\n        this._changeState(exports.ActivationState.INACTIVE);\n        return Promise.resolve();\n      }\n      if (force) {\n        this._stompHandler?.discardWebsocket();\n      } else if (needToDispose) {\n        this._disposeStompHandler();\n      }\n      return retPromise;\n    }\n    /**\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n     * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n     * After forcing disconnect, automatic reconnect will be attempted.\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n     */\n    forceDisconnect() {\n      if (this._stompHandler) {\n        this._stompHandler.forceDisconnect();\n      }\n    }\n    _disposeStompHandler() {\n      // Dispose STOMP Handler\n      if (this._stompHandler) {\n        this._stompHandler.dispose();\n      }\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body, use `binaryBody` parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages, `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect\n     * if the message body has NULL octet(s) and `content-length` header is missing.\n     *\n     * ```javascript\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n    publish(params) {\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      this._stompHandler.publish(params);\n    }\n    _checkConnection() {\n      if (!this.connected) {\n        throw new TypeError('There is no underlying STOMP connection');\n      }\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use.\n     * Typically, a sequence, a UUID, a random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based on the value of the receipt-id.\n     *\n     * This method allows watching for a receipt and invoking the callback\n     *  when the corresponding receipt has been received.\n     *\n     * The actual {@link IFrame} will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Subscribing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n     *\n     *\n     *        // Publishing with acknowledgement\n     *        receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     */\n    watchForReceipt(receiptId, callback) {\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each\n     * received message with the {@link IMessage} as argument.\n     *\n     * Note: The library will generate a unique ID if there is none provided in the headers.\n     *       To use your own ID, pass it using the `headers` argument.\n     *\n     * ```javascript\n     *        callback = function(message) {\n     *        // called when the client receives a STOMP message from the server\n     *          if (message.body) {\n     *            alert(\"got message with body \" + message.body)\n     *          } else {\n     *            alert(\"got empty message\");\n     *          }\n     *        });\n     *\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     *        // Explicit subscription id\n     *        var mySubId = 'my-subscription-id-001';\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n     * ```\n     */\n    subscribe(destination, callback, headers = {}) {\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * It is preferable to unsubscribe from a subscription by calling\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n     *\n     * ```javascript\n     *        var subscription = client.subscribe(destination, onmessage);\n     *        // ...\n     *        subscription.unsubscribe();\n     * ```\n     *\n     * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n     */\n    unsubscribe(id, headers = {}) {\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n     * and [abort]{@link ITransaction#abort}.\n     *\n     * `transactionId` is optional, if not passed the library will generate it internally.\n     */\n    begin(transactionId) {\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commit a transaction.\n     *\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.commit();\n     * ```\n     */\n    commit(transactionId) {\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Abort a transaction.\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.abort();\n     * ```\n     */\n    abort(transactionId) {\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      this._stompHandler.abort(transactionId);\n    }\n    /**\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // acknowledge it\n     *          message.ack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    ack(messageId, subscriptionId, headers = {}) {\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // an error occurs, nack it\n     *          message.nack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    nack(messageId, subscriptionId, headers = {}) {\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n  }\n\n  /**\n   * Configuration options for STOMP Client, each key corresponds to\n   * field by the same name in {@link Client}. This can be passed to\n   * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\n   *\n   * Part of `@stomp/stompjs`.\n   */\n  class StompConfig {}\n\n  /**\n   * STOMP headers. Many functions calls will accept headers as parameters.\n   * The headers sent by Broker will be available as [IFrame#headers]{@link IFrame#headers}.\n   *\n   * `key` and `value` must be valid strings.\n   * In addition, `key` must not contain `CR`, `LF`, or `:`.\n   *\n   * Part of `@stomp/stompjs`.\n   */\n  class StompHeaders {}\n\n  /**\n   * Part of `@stomp/stompjs`.\n   *\n   * @internal\n   */\n  class HeartbeatInfo {\n    constructor(client) {\n      this.client = client;\n    }\n    get outgoing() {\n      return this.client.heartbeatOutgoing;\n    }\n    set outgoing(value) {\n      this.client.heartbeatOutgoing = value;\n    }\n    get incoming() {\n      return this.client.heartbeatIncoming;\n    }\n    set incoming(value) {\n      this.client.heartbeatIncoming = value;\n    }\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using {@link Client}.\n   *\n   * **Deprecated**\n   *\n   * Part of `@stomp/stompjs`.\n   *\n   * To upgrade, please follow the [Upgrade Guide](https://stomp-js.github.io/guide/stompjs/upgrading-stompjs.html)\n   */\n  class CompatClient extends Client {\n    /**\n     * Available for backward compatibility, please shift to using {@link Client}\n     * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n     *\n     * **Deprecated**\n     *\n     * @internal\n     */\n    constructor(webSocketFactory) {\n      super();\n      /**\n       * It is no op now. No longer needed. Large packets work out of the box.\n       */\n      this.maxWebSocketFrameSize = 16 * 1024;\n      this._heartbeatInfo = new HeartbeatInfo(this);\n      this.reconnect_delay = 0;\n      this.webSocketFactory = webSocketFactory;\n      // Default from previous version\n      this.debug = (...message) => {\n        console.log(...message);\n      };\n    }\n    _parseConnect(...args) {\n      let closeEventCallback;\n      let connectCallback;\n      let errorCallback;\n      let headers = {};\n      if (args.length < 2) {\n        throw new Error('Connect requires at least 2 arguments');\n      }\n      if (typeof args[1] === 'function') {\n        [headers, connectCallback, errorCallback, closeEventCallback] = args;\n      } else {\n        switch (args.length) {\n          case 6:\n            [headers.login, headers.passcode, connectCallback, errorCallback, closeEventCallback, headers.host] = args;\n            break;\n          default:\n            [headers.login, headers.passcode, connectCallback, errorCallback, closeEventCallback] = args;\n        }\n      }\n      return [headers, connectCallback, errorCallback, closeEventCallback];\n    }\n    /**\n     * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n     *\n     * **Deprecated**\n     *\n     * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n     * version with headers to pass your broker specific options.\n     *\n     * overloads:\n     * - connect(headers, connectCallback)\n     * - connect(headers, connectCallback, errorCallback)\n     * - connect(login, passcode, connectCallback)\n     * - connect(login, passcode, connectCallback, errorCallback)\n     * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n     * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n     *\n     * params:\n     * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n     * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n     * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n     * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n     * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    connect(...args) {\n      const out = this._parseConnect(...args);\n      if (out[0]) {\n        this.connectHeaders = out[0];\n      }\n      if (out[1]) {\n        this.onConnect = out[1];\n      }\n      if (out[2]) {\n        this.onStompError = out[2];\n      }\n      if (out[3]) {\n        this.onWebSocketClose = out[3];\n      }\n      super.activate();\n    }\n    /**\n     * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\n     *\n     * **Deprecated**\n     *\n     * See:\n     * [Client#onDisconnect]{@link Client#onDisconnect}, and\n     * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    disconnect(disconnectCallback, headers = {}) {\n      if (disconnectCallback) {\n        this.onDisconnect = disconnectCallback;\n      }\n      this.disconnectHeaders = headers;\n      super.deactivate();\n    }\n    /**\n     * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n     *\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations. The headers will, typically, be available to the subscriber.\n     * However, there may be special purpose headers corresponding to your STOMP broker.\n     *\n     *  **Deprecated**, use [Client#publish]{@link Client#publish}\n     *\n     * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n     *\n     * ```javascript\n     *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n     *\n     *        // If you want to send a message with a body, you must also pass the headers argument.\n     *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n     * ```\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    send(destination, headers = {}, body = '') {\n      headers = Object.assign({}, headers);\n      const skipContentLengthHeader = headers['content-length'] === false;\n      if (skipContentLengthHeader) {\n        delete headers['content-length'];\n      }\n      this.publish({\n        destination,\n        headers: headers,\n        body,\n        skipContentLengthHeader\n      });\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n     *\n     * **Deprecated**\n     */\n    set reconnect_delay(value) {\n      this.reconnectDelay = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n     *\n     * **Deprecated**\n     */\n    get ws() {\n      return this.webSocket;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\n     *\n     * **Deprecated**\n     */\n    get version() {\n      return this.connectedVersion;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n     *\n     * **Deprecated**\n     */\n    get onreceive() {\n      return this.onUnhandledMessage;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n     *\n     * **Deprecated**\n     */\n    set onreceive(value) {\n      this.onUnhandledMessage = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n     * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n     *\n     * **Deprecated**\n     */\n    get onreceipt() {\n      return this.onUnhandledReceipt;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n     *\n     * **Deprecated**\n     */\n    set onreceipt(value) {\n      this.onUnhandledReceipt = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n     * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n     *\n     * **Deprecated**\n     */\n    get heartbeat() {\n      return this._heartbeatInfo;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n     * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n     *\n     * **Deprecated**\n     */\n    set heartbeat(value) {\n      this.heartbeatIncoming = value.incoming;\n      this.heartbeatOutgoing = value.outgoing;\n    }\n  }\n\n  /**\n   * STOMP Class, acts like a factory to create {@link Client}.\n   *\n   * Part of `@stomp/stompjs`.\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}.\n   */\n  class Stomp {\n    /**\n     * This method creates a WebSocket client that is connected to\n     * the STOMP server located at the url.\n     *\n     * ```javascript\n     *        var url = \"ws://localhost:61614/stomp\";\n     *        var client = Stomp.client(url);\n     * ```\n     *\n     * **Deprecated**\n     *\n     * It will be removed in next major version. Please switch to {@link Client}\n     * using [Client#brokerURL]{@link Client#brokerURL}.\n     */\n    static client(url, protocols) {\n      // This is a hack to allow another implementation than the standard\n      // HTML5 WebSocket class.\n      //\n      // It is possible to use another class by calling\n      //\n      //     Stomp.WebSocketClass = MozWebSocket\n      //\n      // *prior* to call `Stomp.client()`.\n      //\n      // This hack is deprecated and `Stomp.over()` method should be used\n      // instead.\n      // See remarks on the function Stomp.over\n      if (protocols == null) {\n        protocols = Versions.default.protocolVersions();\n      }\n      const wsFn = () => {\n        const klass = Stomp.WebSocketClass || WebSocket;\n        return new klass(url, protocols);\n      };\n      return new CompatClient(wsFn);\n    }\n    /**\n     * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n     * specify the WebSocket to use (either a standard HTML5 WebSocket or\n     * a similar object).\n     *\n     * In order to support reconnection, the function Client._connect should be callable more than once.\n     * While reconnecting\n     * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n     * alternatively allows passing a function that should return a new instance of the underlying socket.\n     *\n     * ```javascript\n     *        var client = Stomp.over(function(){\n     *          return new WebSocket('ws://localhost:15674/ws')\n     *        });\n     * ```\n     *\n     * **Deprecated**\n     *\n     * It will be removed in next major version. Please switch to {@link Client}\n     * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n     */\n    static over(ws) {\n      let wsFn;\n      if (typeof ws === 'function') {\n        wsFn = ws;\n      } else {\n        console.warn('Stomp.over did not receive a factory, auto reconnect will not work. ' + 'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over');\n        wsFn = () => ws;\n      }\n      return new CompatClient(wsFn);\n    }\n  }\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   *\n   * **Deprecated**\n   *\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  // tslint:disable-next-line:variable-name\n  Stomp.WebSocketClass = null;\n  exports.Client = Client;\n  exports.CompatClient = CompatClient;\n  exports.FrameImpl = FrameImpl;\n  exports.Parser = Parser;\n  exports.Stomp = Stomp;\n  exports.StompConfig = StompConfig;\n  exports.StompHeaders = StompHeaders;\n  exports.Versions = Versions;\n});","map":{"version":3,"names":["BYTE","LF","NULL","FrameImpl","constructor","params","command","headers","body","binaryBody","escapeHeaderValues","skipContentLengthHeader","Object","assign","_binaryBody","isBinaryBody","_body","TextDecoder","decode","TextEncoder","encode","fromRawFrame","rawFrame","trim","str","replace","header","reverse","indexOf","key","value","hdrValueUnEscape","toString","serializeCmdAndHeaders","serialize","cmdAndHeaders","toUnit8Array","buffer","lines","name","keys","push","hdrValueEscape","isBodyEmpty","bodyLength","join","length","sizeOfUTF8","s","uint8CmdAndHeaders","nullTerminator","Uint8Array","uint8Frame","set","marshall","frame","CR","COLON","Parser","onFrame","onIncomingPing","_encoder","_decoder","_token","_initState","parseChunk","segment","appendMissingNULLonIncoming","chunk","chunkWithNull","i","byte","_onByte","_collectFrame","_collectCommand","_reinjectByte","_results","_consumeTokenAsUTF8","_collectHeaders","_consumeByte","_setupCollectBody","_collectHeaderKey","_headerKey","_collectHeaderValue","undefined","contentLengthHeader","filter","_bodyBytesRemaining","parseInt","_collectBodyFixedSize","_collectBodyNullTerminated","_retrievedBody","_consumeTokenAsRaw","e","console","log","rawResult","exports","StompSocketState","ActivationState","Versions","versions","supportedVersions","protocolVersions","map","x","V1_0","V1_1","V1_2","default","augmentWebsocket","webSocket","debug","terminate","noOp","onerror","onmessage","onopen","ts","Date","id","Math","random","substring","origOnClose","onclose","closeEvent","delay","getTime","code","reason","close","call","wasClean","StompHandler","_client","_webSocket","config","_connected","_serverFrameHandlers","CONNECTED","server","_connectedVersion","version","_escapeHeaderValues","_setupHeartbeat","onConnect","MESSAGE","subscription","onReceive","_subscriptions","onUnhandledMessage","message","client","messageId","ack","nack","RECEIPT","callback","_receiptWatchers","onUnhandledReceipt","ERROR","onStompError","_counter","_partialData","_lastServerActivityTS","now","stompVersions","connectHeaders","disconnectHeaders","heartbeatIncoming","heartbeatOutgoing","splitLargeFrames","maxWebSocketChunkSize","forceBinaryWSFrames","logRawCommunication","discardWebsocketOnCommFailure","onDisconnect","onWebSocketClose","onWebSocketError","onUnhandledFrame","connectedVersion","connected","start","parser","serverFrameHandler","evt","rawChunkAsString","data","ArrayBuffer","url","_cleanUp","errorEvent","_transmit","serverOutgoing","serverIncoming","split","v","ttl","max","_pinger","setInterval","readyState","OPEN","send","_ponger","delta","_closeOrDiscardWebsocket","discardWebsocket","_closeWebsocket","forceDisconnect","CONNECTING","msg","rawChunk","out","dispose","receipt","watchForReceipt","error","clearInterval","publish","destination","hdrs","receiptId","subscribe","unsubscribe","begin","transactionId","txId","transaction","commit","abort","subscriptionId","Client","conf","connectionTimeout","reconnectDelay","state","INACTIVE","beforeConnect","onChangeState","_disconnectHeaders","configure","_stompHandler","active","ACTIVE","_changeState","activate","_activate","_connect","DEACTIVATING","deactivate","then","_connectionWatcher","clearTimeout","setTimeout","_createWebSocket","_disposeStompHandler","_schedule_reconnect","webSocketFactory","brokerURL","WebSocket","Error","binaryType","_reconnector","options","force","needToDispose","retPromise","Promise","resolve","CLOSED","origOnWebSocketClose","reject","_checkConnection","TypeError","StompConfig","StompHeaders","HeartbeatInfo","outgoing","incoming","CompatClient","maxWebSocketFrameSize","_heartbeatInfo","reconnect_delay","_parseConnect","args","closeEventCallback","connectCallback","errorCallback","login","passcode","host","connect","disconnect","disconnectCallback","ws","onreceive","onreceipt","heartbeat","Stomp","protocols","wsFn","klass","WebSocketClass","over","warn"],"sources":["../src/byte.ts","../src/frame-impl.ts","../src/parser.ts","../src/types.ts","../src/versions.ts","../src/augment-websocket.ts","../src/stomp-handler.ts","../src/client.ts","../src/stomp-config.ts","../src/stomp-headers.ts","../src/compatibility/heartbeat-info.ts","../src/compatibility/compat-client.ts","../src/compatibility/stomp.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}